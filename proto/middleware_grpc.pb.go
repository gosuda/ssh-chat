// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: middleware.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamMiddleware_StreamChat_FullMethodName = "/sshchat.StreamMiddleware/StreamChat"
)

// StreamMiddlewareClient is the client API for StreamMiddleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StreamMiddleware defines bidirectional streaming for SSH chat and AI messages
type StreamMiddlewareClient interface {
	// StreamChat establishes a bidirectional stream:
	// - Server sends ChatMessage when SSH clients send messages
	// - Client sends AIResponse with streaming text chunks
	StreamChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AIResponse, ChatMessage], error)
}

type streamMiddlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamMiddlewareClient(cc grpc.ClientConnInterface) StreamMiddlewareClient {
	return &streamMiddlewareClient{cc}
}

func (c *streamMiddlewareClient) StreamChat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AIResponse, ChatMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamMiddleware_ServiceDesc.Streams[0], StreamMiddleware_StreamChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AIResponse, ChatMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMiddleware_StreamChatClient = grpc.BidiStreamingClient[AIResponse, ChatMessage]

// StreamMiddlewareServer is the server API for StreamMiddleware service.
// All implementations must embed UnimplementedStreamMiddlewareServer
// for forward compatibility.
//
// StreamMiddleware defines bidirectional streaming for SSH chat and AI messages
type StreamMiddlewareServer interface {
	// StreamChat establishes a bidirectional stream:
	// - Server sends ChatMessage when SSH clients send messages
	// - Client sends AIResponse with streaming text chunks
	StreamChat(grpc.BidiStreamingServer[AIResponse, ChatMessage]) error
	mustEmbedUnimplementedStreamMiddlewareServer()
}

// UnimplementedStreamMiddlewareServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamMiddlewareServer struct{}

func (UnimplementedStreamMiddlewareServer) StreamChat(grpc.BidiStreamingServer[AIResponse, ChatMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedStreamMiddlewareServer) mustEmbedUnimplementedStreamMiddlewareServer() {}
func (UnimplementedStreamMiddlewareServer) testEmbeddedByValue()                          {}

// UnsafeStreamMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamMiddlewareServer will
// result in compilation errors.
type UnsafeStreamMiddlewareServer interface {
	mustEmbedUnimplementedStreamMiddlewareServer()
}

func RegisterStreamMiddlewareServer(s grpc.ServiceRegistrar, srv StreamMiddlewareServer) {
	// If the following call pancis, it indicates UnimplementedStreamMiddlewareServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamMiddleware_ServiceDesc, srv)
}

func _StreamMiddleware_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamMiddlewareServer).StreamChat(&grpc.GenericServerStream[AIResponse, ChatMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamMiddleware_StreamChatServer = grpc.BidiStreamingServer[AIResponse, ChatMessage]

// StreamMiddleware_ServiceDesc is the grpc.ServiceDesc for StreamMiddleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamMiddleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sshchat.StreamMiddleware",
	HandlerType: (*StreamMiddlewareServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _StreamMiddleware_StreamChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "middleware.proto",
}
